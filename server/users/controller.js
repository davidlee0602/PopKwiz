import firebase from 'firebase-admin';
import UUID from 'uuid-v4'; // import fs from 'fs';
import { db, bucket } from '../database/firestore';
import { USERS } from '../../constants';
import { cache } from './cache';

// remove User's picture from firebase storage
const pictureRemove = (userid) => {
  const user = cache.get(userid);
  console.log(user);
  if (user.picture) {
    bucket
      .file(user.picture)
      .delete()
      .then(() => {
        console.log(`${user.picture} successfully removed from firebase storage.`);
      })
      .catch((err) => console.log(err));

    cache.del(userid);
  }
};

// add new picture to firebase storage
const uploadPicture = (fname, file, uuid) => {
  const blob = bucket.file(fname);
  const blobWriter = blob.createWriteStream({
    metadata: {
      destination: 'images',
      contentType: file.mimetype,
      firebaseStorageDownloadtokens: uuid,
    },
  });

  blobWriter.on('error', (err) => {
    console.log('hello there!');
    console.log(err);
  });

  blobWriter.end(file.buffer);
};

// get users from firestore
export const getUsers = async (userQuery) => {
  const { username } = userQuery;
  let userSearch = '';
  if (username) {
    userSearch = db.collection(USERS).where('username', '>=', username).where('username', '<=', `${username}\uf8ff`);
  } else {
    userSearch = db.collection(USERS);
  }
  // create list for users and populate it with data in firestore
  const userList = [];
  await userSearch.get().then((querySnapshot) => {
    querySnapshot.forEach((doc) => {
      userList.push(doc.data());
    });
  });

  return userList;
};

// get user with id
export const getUserById = async (userID) => {
  let user = cache.get(userID);
  if (user) return user;

  const doc = await db.collection(USERS).doc(userID).get();
  user = doc.data();
  console.log(user);
  cache.set(userID, user);
  return user;
};

// add users to firestore
export const addUser = async (user) => {
  const newUserID = user.uid; // from firebase. Will replace autogenerated id created by firestore for new documents.
  const now = firebase.firestore.Timestamp.now();
  const newUser = {
    username: user.username,
    email: user.email,
    id: newUserID,
    picture: user.picture || null,
    createdAt: now,
    updatedAt: now,
  };

  // https://firebase.google.com/docs/firestore/manage-data/add-data
  return db.collection(USERS).doc(newUserID).set(newUser);
};

// update user
export const updateUserName = async (user) => {
  const newUserID = user.uid; // from firebase. Will replace autogenerated id created by firestore for new documents.
  const now = firebase.firestore.Timestamp.now();
  const updatedUser = {
    username: user.username,
    updatedAt: now,
  };

  // https://firebase.google.com/docs/firestore/manage-data/add-data
  return db.collection(USERS).doc(newUserID).update(updatedUser);
};

// update user
export const updateUserPicture = async (req) => {
  const uuid = UUID();
  const { file } = req;
  const { uid } = req.body;
  let fname = file.originalname;
  // const user = cache.get(uid);

  if (file.mimetype === 'image/png') {
    console.log('file type is png');
    fname = `${uuid}.png`;
  } else if (file.mimetype === 'image/jpeg') {
    console.log('file type is jpeg');

    fname = `${uuid}.jpg`;
  }

  if (!req.file) {
    return { status: 400, msg: 'Error: No files found' };
  }

  // add picture to firebase storage
  uploadPicture(fname, file, uuid);

  // remove old picture from firebase storage
  pictureRemove(uid);

  // update User's path to picture
  const now = firebase.firestore.Timestamp.now();
  const updatedUser = {
    picture: fname,
    updatedAt: now,
  };

  // https://firebase.google.com/docs/firestore/manage-data/add-data
  db.collection(USERS).doc(uid).update(updatedUser);
  return { status: 200, msg: fname };
};
